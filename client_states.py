import re

from datetime import datetime
from dateutil.relativedelta import relativedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import text

from hash import hashed

from timepicker import build_hour_keyboard_clock

from imageloading.imagemaker import overlay_images
from get_absolute_path import absolute_path
from markup_states import markup_default, inline_verification, markup_cancelation

from config import frame_absolute_path, output_absolute_folder, bot_token, under_post_text_switch, receipts_folder_path
from config import input_absolute_folder

from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback, DialogCalendar, DialogCalendarCallback, get_user_locale
from aiogram.filters.callback_data import CallbackData

# Initialize bot and dispatcher
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Define states
class PostStates(StatesGroup):
    uploading_photo = State()
    photo_text = State()
    post_text = State()
    selecting_date = State()
    selecting_time = State()
    final_verification = State()
    payment = State()

# Cancel conversation handler
@dp.message(F.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def cancel_conversation(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", reply_markup=markup_default())

# Start command handler
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup_default())

# Create post handler
@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç")
async def default_create(message: types.Message, state: FSMContext):
    await state.set_state(PostStates.uploading_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞.", reply_markup=markup_cancelation())

# Show all posts handler
@dp.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã")
async def default_showall(message: types.Message):
    await message.answer("This part of the bot is work in progress")

# Handle photo upload
@dp.message(StateFilter(PostStates.uploading_photo), F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    file_info = await bot.get_file(file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    downloaded_file = downloaded_file.read()
    save_input_path = f"{input_absolute_folder}{message.from_user.first_name}_input.jpg"
    with open(save_input_path, "wb") as new_file:
        new_file.write(downloaded_file)

    await message.answer("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ.")
    await state.update_data(input_photo_path=absolute_path(save_input_path))
    await state.set_state(PostStates.photo_text)


@dp.message(StateFilter(PostStates.uploading_photo), F.document, F.document.mime_type.startswith("image/"))
async def handle_photo(message: types.Message, state: FSMContext):
    file_id = message.document.file_id  # Get file ID
    file_info = await bot.get_file(file_id)  # Get file info
    file_path = file_info.file_path  # Telegram's file path

    # üì• Download the file
    image_data = await bot.download_file(file_path)

    save_input_path = f"{input_absolute_folder}{message.from_user.first_name}_input.jpg"
    with open(save_input_path, "wb") as new_file:
        new_file.write(image_data.read())

    await message.answer("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ.")
    await state.update_data(input_photo_path=absolute_path(save_input_path))
    await state.set_state(PostStates.photo_text)


# Handle invalid photo input
@dp.message(StateFilter(PostStates.uploading_photo))
async def invalid_photo(message: types.Message):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.", reply_markup=markup_cancelation())


# Handle photo text
@dp.message(StateFilter(PostStates.photo_text), F.text)
async def photo_text(message: types.Message, state: FSMContext):
    safe_text = hashed( message.text)
    safe_first_name = re.sub(r'[\/:*?"<>|]', '', message.from_user.first_name)

    data = await state.get_data()
    input_photo_path = data['input_photo_path']

    output_path_file = f"{output_absolute_folder}/{safe_first_name}_{safe_text}_edited.png"
    overlay_images(input_photo_path, frame_absolute_path, output_path_file, message.text)

    await state.update_data(output_photo_path=output_path_file)
    output_photo = FSInputFile(output_path_file)

    
    await message.answer_photo(output_photo)
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?", reply_markup=inline_verification("photo_text"))


@dp.message(StateFilter(PostStates.photo_text))
async def invalid_text(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¢–µ–∫—Å—Ç")

# Handle post text
@dp.message(StateFilter(PostStates.post_text))
async def post_text(message: types.Message, state: FSMContext):
    await state.update_data(post_text=message.text)
    
    await message.answer(f'–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞: "{message.text}"\n–ü—Ä–æ–¥–æ–ª–∂–∏–º –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–æ–π?', reply_markup=inline_verification("post_text"))


@dp.message(F.document, F.document.mime_type == "application/pdf", StateFilter(PostStates.payment))
async def payment_handle_pdf(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –í–∞—à —á–µ–∫ –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
                         reply_markup = inline_verification("payment"))    
    await state.update_data(receipt_id = message.document.file_id)


@dp.message(F.photo, StateFilter(PostStates.payment))
async def payment_invalid_photo(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –≤–∏–¥—É PDF —Ñ–∞–π–ª–∞. –§–æ—Ç–æ —á–µ–∫–∞ –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç",
                         reply_markup = markup_cancelation()
                         )


@dp.message(StateFilter(PostStates.payment))
async def payment_invalid_rest(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –≤–∏–¥—É PDF —Ñ–∞–π–ª–∞.", 
                         reply_markup = markup_cancelation()
                         )



# Handle verification callbacks
@dp.callback_query(F.data.startswith(("confirm_", "retry_")))
async def handle_verification(call: types.CallbackQuery, state: FSMContext):
    step = call.data.split("_", 1)[1] if "_" in call.data else call.data

    print(f"Callback data received: {call.data} and step: {step}")  # Log the callback data
    if call.data.startswith("confirm_"):
        if step == "photo_text":
            if under_post_text_switch:
                await state.set_state(PostStates.post_text)
                await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞", reply_markup=markup_cancelation())
            else:
                await state.set_state(PostStates.selecting_date)
                today = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
                next_month = datetime.today() + relativedelta(months=1)

                calendar = SimpleCalendar(
                locale='ru-RU', show_alerts=True
                )
                calendar.set_dates_range(today, next_month)
                await call.message.edit_text(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                           reply_markup=await calendar.start_calendar()
                           )
                await call.answer()
        elif step == "post_text":
            await state.set_state(PostStates.selecting_date)
            today = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
            next_month = datetime.today() + relativedelta(months=1)

            calendar = SimpleCalendar(
                locale='ru-RU', show_alerts=True
                )
            calendar.set_dates_range(today, next_month)
            await call.message.edit_text(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                           reply_markup=await calendar.start_calendar()
                           )
            await call.answer()


        elif step == "selecting_date":
            await state.set_state(PostStates.selecting_time)
            await call.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=build_hour_keyboard_clock())


        elif step == "selecting_time":
            await state.set_state(PostStates.final_verification)
            data = await state.get_data()
            if under_post_text_switch:
                text = data.get('post_text')
                date = data.get('post_date')
                time = data.get('post_time')
                post_text = f"{text}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}"
            else:
                post_text = f"–î–∞—Ç–∞: {data['post_date']}\n–í—Ä–µ–º—è: {data['post_time']}"

            output_photo = FSInputFile(data['output_photo_path'])

            await call.message.answer_photo(output_photo, caption=post_text)

            await call.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º –∏–ª–∏ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", reply_markup=inline_verification("final_verification"))



        elif step == "final_verification":
            await call.message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ 5 000—Ç–≥ —á–µ—Ä–µ–∑ Kaspi –Ω–æ–º–µ—Ä: +7 705 406 60 26. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .pdf –µ–∫.", reply_markup = markup_cancelation()
                                      )
            await state.set_state(PostStates.payment)
        

        elif step == "payment":
            await call.message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º—ã. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É!.",
                                      reply_markup = markup_default())
            
            data = await state.get_data()
            receipt_id = data.get("receipt_id")
            file_info = await bot.get_file(receipt_id)
            file_path = file_info.file_path

            pdf_data = await bot.download_file(file_path)
            save_path = f"{receipts_folder_path}{call.message.from_user.first_name}_{receipt_id}.pdf"
            with open(save_path, 'wb') as f:
                f.write(pdf_data.read())

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ –¥–±

            await state.clear()

    elif call.data.startswith("retry_"):
        if step == "photo_text":
            await state.set_state(PostStates.uploading_photo)
            await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ", reply_markup=markup_cancelation())


        elif step == "post_text":
            await call.answer()
            await state.set_state(PostStates.post_text)
            await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç", reply_markup=markup_cancelation())


        elif step == "selecting_date":

            await state.set_state(PostStates.selecting_date)
            today = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
            next_month = datetime.today() + relativedelta(months=1)

            calendar = SimpleCalendar(
                locale='ru-RU', show_alerts=True
                )
            calendar.set_dates_range(today, next_month)
            await call.message.edit_text(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                           reply_markup=await calendar.start_calendar()
                           )
            await call.answer()



        elif step == "selecting_time":
            await state.set_state(PostStates.selecting_time)
            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=build_hour_keyboard_clock())


        elif step == "final_verification":
            await state.set_state(PostStates.uploading_photo)
            await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞.", reply_markup=markup_cancelation())
        
        elif step == "payment":
            await state.set_state(PostStates.payment)
            await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–≤—ã–π —á–µ–∫.")


    await call.answer()

# Handle calendar callback
@dp.callback_query(SimpleCalendarCallback.filter(), StateFilter(PostStates.selecting_date))
async def selecting_date(callback_query: types.CallbackQuery,callback_data: CallbackData, state: FSMContext):

    calendar = SimpleCalendar(
        locale="ru-RU", show_alerts=True
    )
    today = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
    next_month = datetime.today() + relativedelta(months=1)

    calendar.set_dates_range(today, next_month)
    selected, date = await calendar.process_selection(callback_query, callback_data)
    if selected:
        await state.update_data(post_date=date.strftime("%d/%m/%Y"))
        print("Checking the save of date: {date_test}")
        await callback_query.message.answer(

            f'You selected {date.strftime("%d/%m/%Y")}\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞—Ç—É –µ—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å.',
            reply_markup = inline_verification("selecting_date")
        )
        # Handle time selection callback
@dp.callback_query(F.data.startswith("hour_") | (F.data == "none"), StateFilter(PostStates.selecting_time))
async def callback_inline(call: types.CallbackQuery, state: FSMContext):
    data = call.data

    if data.startswith("hour_"):
        chosen_hour = data.split("_")[1]
        await state.update_data(post_time = chosen_hour)
        # ‚úÖ Edit message text to show the selected hour
        await call.message.edit_text(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {chosen_hour}. –ï—Å–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –µ—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å.",
                                     reply_markup = inline_verification("selecting_time")
                                     )

    await call.answer()  # ‚úÖ Always close the callback query to avoid "loading" state

# Start polling
if __name__ == '__main__':
    dp.run_polling(bot)
